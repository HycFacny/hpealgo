........................lite_hrnet model: : >>>>
LiteHRNet(
  (stem): Stem(
    (conv1): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (branch1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): ReLU(inplace=True)
    )
    (expansion): Sequential(
      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (depthwise): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (linear): Sequential(
      (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
  (transition1): ModuleList(
    (0): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(32, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): ReLU(inplace=True)
    )
    (1): Sequential(
      (0): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): Conv2d(32, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (4): ReLU(inplace=True)
      )
    )
  )
  (stage2): Sequential(
    (0): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(60, 7, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(7, 60, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(60, 7, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(7, 60, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (1): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(60, 7, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(7, 60, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(60, 7, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(7, 60, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (2): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(60, 7, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(7, 60, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(60, 7, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(7, 60, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
        )
      )
      (relu): ReLU(inplace=True)
    )
  )
  (transition2): ModuleList(
    (0): None
    (1): None
    (2): Sequential(
      (0): Sequential(
        (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
        (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (4): ReLU(inplace=True)
      )
    )
  )
  (stage3): Sequential(
    (0): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (1): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (2): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (3): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (4): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (5): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (6): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (7): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(140, 17, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(17, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(17, 140, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
        )
      )
      (relu): ReLU(inplace=True)
    )
  )
  (transition3): ModuleList(
    (0): None
    (1): None
    (2): None
    (3): Sequential(
      (0): Sequential(
        (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=160, bias=False)
        (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (4): ReLU(inplace=True)
      )
    )
  )
  (stage4): Sequential(
    (0): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(300, 37, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(37, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(37, 300, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
            (3): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=160)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(300, 37, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(37, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(37, 300, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
            (3): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=160)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
          (3): Sequential(
            (0): Conv2d(320, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=8.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): Conv2d(320, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
          (3): Sequential(
            (0): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (3): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (2): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): Sequential(
              (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=160, bias=False)
              (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (1): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(300, 37, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(37, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(37, 300, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
            (3): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=160)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(300, 37, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(37, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(37, 300, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
            (3): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=160)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
          (3): Sequential(
            (0): Conv2d(320, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=8.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): Conv2d(320, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
          (3): Sequential(
            (0): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (3): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (2): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): Sequential(
              (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=160, bias=False)
              (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): None
        )
      )
      (relu): ReLU(inplace=True)
    )
    (2): LiteHRModule(
      (layers): Sequential(
        (0): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(300, 37, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(37, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(37, 300, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
            (3): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=160)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (1): ConditionalChannelWeighting(
          (cross_resolution_weighting): CrossResolutionWeighting(
            (conv1): Conv2d(300, 37, kernel_size=(1, 1), stride=(1, 1))
            (norm1): BatchNorm2d(37, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(37, 300, kernel_size=(1, 1), stride=(1, 1))
            (norm2): BatchNorm2d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (depthwise_conv): ModuleList(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=20)
            (1): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
            (3): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=160)
          )
          (spatial_weighting): ModuleList(
            (0): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(20, 5, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(5, 20, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(20, 80, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): SpatialWeighting(
              (aap): AdaptiveAvgPool2d(output_size=1)
              (conv1): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1))
              (conv2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (fuse_layers): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): Conv2d(160, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
          (3): Sequential(
            (0): Conv2d(320, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=8.0, mode=nearest)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): None
          (2): Sequential(
            (0): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): Conv2d(320, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=4.0, mode=nearest)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): None
          (3): Sequential(
            (0): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (3): ModuleList(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (2): Sequential(
              (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=40, bias=False)
              (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(40, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=80, bias=False)
              (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(80, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): Sequential(
              (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=160, bias=False)
              (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): None
        )
      )
      (relu): ReLU(inplace=True)
    )
  )
  (head_layer): IterativeHead(
    (projects): ModuleList(
      (0): Sequential(
        (0): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=320)
        (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1))
        (4): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=160)
        (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1))
        (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=80)
        (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1))
        (4): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
      )
      (3): Sequential(
        (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40)
        (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1))
        (4): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
      )
    )
  )
)
